parameters:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: 'Build the project - ${{ parameters.buildConfiguration }}'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration ${{ parameters.buildConfiguration }}'
    projects: '**/*.csproj'

# Notice that this task does not specify the --logger trx argument. 
# The publishTestResults argument adds that for you. This argument tells the 
# pipeline to generate the TRX file to a temporary directory, accessible 
# through the $(Agent.TempDirectory) built-in variable. It also publishes the 
# task results to the pipeline.
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - ${{ parameters.buildConfiguration }}'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration ${{ parameters.buildConfiguration }}'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

# publish, or package, the app's build results (including its dependencies) into a folder. 
# zipAfterPublish argument specifies to add the built results to a .zip file.
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - ${{ parameters.buildConfiguration }}'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/${{ parameters.buildConfiguration }}'
    zipAfterPublish: true