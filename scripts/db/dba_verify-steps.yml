parameters:
- name: buildConfiguration
  displayName: buildConfiguration
  type: string
  default: 'Release'

steps:
- download: current         # downloads artifacts produced by the current pipeline run. Options: current, specific. 
  artifact: dropDacpac      # by default, files are downloaded to $(Pipeline.Workspace)
  patterns: '**/*'          # artifact: the name of the artifact to download; patterns: limits which files get downloaded

- task: SqlAzureDacpacDeployment@1
  displayName: Generate schema change script
  inputs:
    azureSubscription: 'Resource Manager - Tailspin - Space Game'
    authenticationType: 'server'
    serverName: '$(servername).database.windows.net'
    databaseName: '$(databasename)'
    sqlUsername: '$(adminlogin)'
    sqlPassword: '$(adminPassword)'
    deployType: 'DacpacTask'
    deploymentAction: 'Script'
    dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/${{ parameters.buildConfiguration }}/Tailspin.SpaceGame.Database.dacpac'
    ipDetectionMethod: 'AutoDetect'

- task: PowerShell@2
  displayName: Show Auto Generated SQL Script
  inputs:
    targetType: 'inline'
    script: | 
      Write-Host "Auto Generated SQL Update Script:"
      Get-Content d:\a\1\s\GeneratedOutputFiles\$(databasename)_Script.sql | foreach {Write-Output $_}

- task: PowerShell@2
  displayName: Show change script and check for schema changes
  inputs:
    targetType: 'inline'
    script: | 
      # Print the schema change script
      Write-Host "Auto Generated SQL Update Script:"
      Get-Content d:\a\1\s\GeneratedOutputFiles\$(databasename)_Script.sql | foreach {Write-Output $_}
      # Check for schema changes
      $file = Get-Content "d:\a\1\s\GeneratedOutputFiles\$(databasename)_Script.sql"
      $containsWord = $file | %{$_ -match "CREATE" -or $_ -match "ALTER" -or $_ -match "DROP"}
      if ($containsWord -contains $true) {
        Install-Module VSTeam -Scope CurrentUser -Force
        Set-VSTeamAccount â€“Account $(Acct) -PersonalAccessToken $(PAT)
        $methodParameters = @{
          ProjectName = "$(System.TeamProject)"
          Name = "Release"}
        $vg = Get-VSTeamVariableGroup @methodParameters
        $vars = @{}
        $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
        $varName = "schemaChanged"
        $vars.$varName= @{}
        $vars.$varName.value = "True"
        $vars.$varName.isSecret = $false
        $methodParameters = @{
          id = $vg.id
          ProjectName = "$(System.TeamProject)"
          Name = "Release"
          Description = ""
          Type = "Vsts"
          Variables = $vars}
        Update-VSTeamVariableGroup @methodParameters} 